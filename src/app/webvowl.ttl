# baseURI: http://gdsr.roche.com/mods/dft/1704/webvowl
# imports: http://spinrdf.org/spl
# imports: http://topbraid.org/spin/spinmapl
# imports: http://www.w3.org/2004/02/skos/core
# prefix: webvowl

@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix webvowl: <http://gdsr.roche.com/mods/dft/1704/webvowl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://gdsr.roche.com/mods/dft/1704/webvowl>
  rdf:type owl:Ontology ;
  webvowl:author "Felix Schwagereit"^^xsd:string ;
  rdfs:comment "This ontology defines a subset of the vocabulary for describing visualization packages for WebVOWL 1.0rc . It also defines rules (in SPIN format) for transforming any OWL/RDFS Ontology into this visualization format. The rules cover only a commonly used subset of OWL/RDFS and only a subset of WebVOWL visualization elements."^^xsd:string ;
  owl:imports <http://spinrdf.org/spl> ;
  owl:imports <http://topbraid.org/spin/spinmapl> ;
  owl:imports <http://www.w3.org/2004/02/skos/core> ;
.
webvowl:Annotation
  rdf:type owl:Class ;
  rdfs:label "Annotation"^^xsd:string ;
.
webvowl:CardinalityPlacement
  rdf:type owl:Class ;
  rdfs:label "Cardinality Placement"^^xsd:string ;
  rdfs:subClassOf owl:Thing ;
.
webvowl:CardinalityPlacementBoxes
  rdf:type webvowl:GraphStyle ;
  webvowl:typeLabel "boxes"^^xsd:string ;
.
webvowl:CardinalityPlacementCLASS
  rdf:type webvowl:CardinalityPlacement ;
  webvowl:typeLabel "CLASS"^^xsd:string ;
.
webvowl:CardinalityPlacementCircles
  rdf:type webvowl:GraphStyle ;
  webvowl:typeLabel "circles"^^xsd:string ;
.
webvowl:CardinalityPlacementPROPERTY
  rdf:type webvowl:CardinalityPlacement ;
  webvowl:typeLabel "PROPERTY"^^xsd:string ;
.
webvowl:Class
  rdf:type owl:Class ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object "true"^^xsd:boolean ;
            sp:predicate webvowl:isReferenceClass ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object webvowl:Class ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            rdf:type sp:NotExists ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "v"^^xsd:string ;
                    ] ;
                  sp:predicate webvowl:isBusinessEntity ;
                  sp:subject spin:_this ;
                ]
              ) ;
          ]
        ) ;
      rdfs:comment "Annotate all non Business Entites as Reference Class"^^xsd:string ;
    ] ;
  rdfs:label "Class"^^xsd:string ;
.
webvowl:Construct_1
  rdf:type sp:Construct ;
  rdfs:label "Coordinate X"^^xsd:string ;
.
webvowl:Datatype
  rdf:type owl:Class ;
  rdfs:label "Datatype"^^xsd:string ;
.
webvowl:DatatypeType
  rdf:type owl:Class ;
  rdfs:label "Datatype Type"^^xsd:string ;
.
webvowl:Definition
  rdf:type owl:Class ;
  rdfs:label "Definition"^^xsd:string ;
  rdfs:subClassOf webvowl:Label ;
.
webvowl:Description
  rdf:type owl:Class ;
  rdfs:label "Description"^^xsd:string ;
.
webvowl:FilterDimension
  rdf:type owl:Class ;
  rdfs:comment "Each Visualization can have defined several Filter Dimensions. The Filter Dimension defines all possible values that are valid in this Dimension and that can be filtered for Model Elements annotated with values of this dimension."^^xsd:string ;
  rdfs:label "Filter Dimension"^^xsd:string ;
.
webvowl:FilterDimensionValue
  rdf:type owl:Class ;
  rdfs:comment "A value that is valid in a Dimension and that can be filtered for Model Elements annotated with it."^^xsd:string ;
  rdfs:label "Filter Dimension Value"^^xsd:string ;
.
webvowl:FocalOntology
  rdf:type owl:Class ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object webvowl:Header ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            sp:object webvowl:undef ;
            sp:predicate webvowl:definedLanguage ;
            sp:subject spin:_this ;
          ]
          [
            sp:object webvowl:iri-based ;
            sp:predicate webvowl:definedLanguage ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "iri"^^xsd:string ;
              ] ;
            sp:predicate webvowl:iri ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "titleIri"^^xsd:string ;
              ] ;
            sp:predicate webvowl:headerTitle ;
            sp:subject spin:_this ;
          ]
          [
            sp:object webvowl:undef ;
            sp:predicate webvowl:contentLanguage ;
            sp:subject [
                sp:varName "titleIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "title"^^xsd:string ;
              ] ;
            sp:predicate webvowl:content ;
            sp:subject [
                sp:varName "titleIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "version"^^xsd:string ;
              ] ;
            sp:predicate webvowl:version ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "author"^^xsd:string ;
              ] ;
            sp:predicate webvowl:author ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "descriptionIri"^^xsd:string ;
              ] ;
            sp:predicate webvowl:headerDescription ;
            sp:subject spin:_this ;
          ]
          [
            sp:object webvowl:undef ;
            sp:predicate webvowl:contentLanguage ;
            sp:subject [
                sp:varName "descriptionIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "description"^^xsd:string ;
              ] ;
            sp:predicate webvowl:content ;
            sp:subject [
                sp:varName "descriptionIri"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object webvowl:FocalOntology ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "title"^^xsd:string ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject spin:_this ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 spin:_this ;
                      ] ;
                    sp:arg2 "TitleIRI" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "titleIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "version"^^xsd:string ;
              ] ;
            sp:predicate owl:versionInfo ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "description"^^xsd:string ;
              ] ;
            sp:predicate rdfs:comment ;
            sp:subject spin:_this ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 spin:_this ;
                      ] ;
                    sp:arg2 "DescriptionIRI" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "descriptionIri"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression "MODS" ;
            sp:variable [
                sp:varName "author"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression spin:_this ;
            sp:variable [
                sp:varName "iri"^^xsd:string ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:comment "The ontology that is a focal ontology will be analyzed by the SPIN rules for extraction of WebVOWL model elements."^^xsd:string ;
  rdfs:label "Focal Ontology"^^xsd:string ;
.
webvowl:GraphStyle
  rdf:type owl:Class ;
  rdfs:label "Graph Style"^^xsd:string ;
  rdfs:subClassOf owl:Thing ;
.
webvowl:HTMLAnnotation
  rdf:type owl:Class ;
  rdfs:label "HTML Annotation"^^xsd:string ;
  rdfs:subClassOf webvowl:Annotation ;
.
webvowl:Header
  rdf:type owl:Class ;
  rdfs:label "Header"^^xsd:string ;
.
webvowl:Individual
  rdf:type owl:Class ;
  rdfs:label "Individual"^^xsd:string ;
.
webvowl:Label
  rdf:type owl:Class ;
  rdfs:label "Label"^^xsd:string ;
.
webvowl:LabelAnnotation
  rdf:type owl:Class ;
  rdfs:label "Label Annotation"^^xsd:string ;
  rdfs:subClassOf webvowl:Annotation ;
.
webvowl:Language
  rdf:type owl:Class ;
  rdfs:label "Language"^^xsd:string ;
.
webvowl:ModelVersion
  rdf:type owl:Class ;
  rdfs:label "Model Version"^^xsd:string ;
.
webvowl:OptionSet
  rdf:type owl:Class ;
  rdfs:comment "The option set collects a number of options that can define the default settings when the application is started."^^xsd:string ;
  rdfs:label "Option Set"^^xsd:string ;
  rdfs:subClassOf owl:Thing ;
.
webvowl:Property
  rdf:type owl:Class ;
  rdfs:label "Property"^^xsd:string ;
.
webvowl:PropertyType
  rdf:type owl:Class ;
  rdfs:label "Property Type"^^xsd:string ;
.
webvowl:Rule
  rdf:type owl:Class ;
  rdfs:label "Rule"^^xsd:string ;
.
webvowl:Title
  rdf:type owl:Class ;
  rdfs:label "Title"^^xsd:string ;
.
webvowl:Type
  rdf:type owl:Class ;
  rdfs:label "Type"^^xsd:string ;
.
webvowl:addIndividualsToDictionary
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "If it's set to true all individuals from the classes are added to the search. For faster searching set it to false. The default value is TRUE ." ;
  rdfs:domain webvowl:OptionSet ;
  rdfs:label "addIndividualsToDictionary" ;
  rdfs:range xsd:boolean ;
.
webvowl:addIriCenterToUrl
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "When is set to true then after search element its name is save in �IRIcenter� param in the URL. The default value is TRUE ." ;
  rdfs:domain webvowl:OptionSet ;
  rdfs:label "addIriCenterToUrl" ;
  rdfs:range xsd:boolean ;
.
webvowl:annotation
  rdf:type owl:ObjectProperty ;
  rdfs:domain [
      rdf:type owl:Class ;
      owl:unionOf (
          webvowl:Class
          webvowl:Rule
        ) ;
    ] ;
  rdfs:range [
      rdf:type owl:Class ;
      owl:unionOf (
          webvowl:Annotation
          webvowl:Definition
        ) ;
    ] ;
.
webvowl:author
  rdf:type owl:DatatypeProperty ;
  rdfs:domain webvowl:Header ;
  rdfs:label "Author"^^xsd:string ;
  rdfs:range xsd:string ;
.
webvowl:cardinality
  rdf:type owl:DatatypeProperty ;
  rdfs:domain webvowl:Property ;
  rdfs:label "Cardinality"^^xsd:string ;
  rdfs:range xsd:integer ;
.
webvowl:cardinalityPlacement
  rdf:type owl:ObjectProperty ;
  rdfs:comment "It defines the place of appearing the cardinality if the cardinalityVisbile is true. If the \"class\" is set is visible on arrow end. If it's \"property\" is inside the datatype box. The default value is PROPERTY ." ;
  rdfs:domain webvowl:OptionSet ;
  rdfs:label "cardinalityPlacement" ;
  rdfs:range webvowl:CardinalityPlacement ;
.
webvowl:cardinalityVisible
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "If it's true lets visible the cardinality number. The default value is FALSE ." ;
  rdfs:domain webvowl:OptionSet ;
  rdfs:label "cardinalityVisible" ;
  rdfs:range xsd:boolean ;
.
webvowl:centerOnFoundElement
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "When is set to true then after search element application automatically center screen on found node. The default value is TRUE ." ;
  rdfs:domain webvowl:OptionSet ;
  rdfs:label "centerOnFoundElement" ;
  rdfs:range xsd:boolean ;
.
webvowl:centerOnLoad
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "If the URL contains \"IRIcenter\" property, and it's set to true the graph will be centered on the element defined in IRIcenter property. The default value is TRUE ." ;
  rdfs:domain webvowl:OptionSet ;
  rdfs:label "centerOnLoad" ;
  rdfs:range xsd:boolean ;
.
webvowl:classDistance
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "It defines distance between classes on the graph. The default value is 200 ." ;
  rdfs:domain webvowl:OptionSet ;
  rdfs:label "classDistance" ;
  rdfs:range xsd:integer ;
.
webvowl:classType
  rdf:type owl:ObjectProperty ;
  rdfs:domain webvowl:Class ;
  rdfs:label "Class Type"^^xsd:string ;
  rdfs:range webvowl:Type ;
.
webvowl:color
  rdf:type owl:DatatypeProperty ;
  rdfs:domain [
      rdf:type owl:Class ;
      owl:unionOf (
          webvowl:Class
          owl:Class
        ) ;
    ] ;
  rdfs:label "Color"^^xsd:string ;
  rdfs:range xsd:string ;
.
webvowl:content
  rdf:type owl:DatatypeProperty ;
  rdfs:domain [
      rdf:type owl:Class ;
      owl:unionOf (
          webvowl:Annotation
          webvowl:Description
          webvowl:Label
          webvowl:Title
        ) ;
    ] ;
  rdfs:label "Content"^^xsd:string ;
  rdfs:range xsd:string ;
.
webvowl:contentLanguage
  rdf:type owl:ObjectProperty ;
  rdfs:domain [
      rdf:type owl:Class ;
      owl:unionOf (
          webvowl:Annotation
          webvowl:Description
          webvowl:Label
          webvowl:Title
        ) ;
    ] ;
  rdfs:label "Content Language"^^xsd:string ;
  rdfs:range webvowl:Language ;
.
webvowl:coordinateX
  rdf:type owl:DatatypeProperty ;
  rdfs:domain [
      rdf:type owl:Class ;
      owl:unionOf (
          webvowl:Class
          owl:Class
          webvowl:Datatype
          webvowl:Property
        ) ;
    ] ;
  rdfs:label "Coordinate X"^^xsd:string ;
  rdfs:range xsd:decimal ;
.
webvowl:coordinateY
  rdf:type owl:DatatypeProperty ;
  rdfs:domain [
      rdf:type owl:Class ;
      owl:unionOf (
          webvowl:Class
          owl:Class
          webvowl:Datatype
          webvowl:Property
        ) ;
    ] ;
  rdfs:label "Coordinate Y"^^xsd:string ;
  rdfs:range xsd:decimal ;
.
webvowl:datatypeDistance
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "It defines distance between datatype and class on the graph. The default value is 120 ." ;
  rdfs:domain webvowl:OptionSet ;
  rdfs:label "datatypeDistance" ;
  rdfs:range xsd:integer ;
.
webvowl:datatypeFilterEnabled
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "If we want to load the application with datatype filter enabled we should set it to true. Application will load a little bit faster, when the graph has many elements. The default value is FALSE ." ;
  rdfs:domain webvowl:OptionSet ;
  rdfs:label "datatypeFilterEnabled" ;
  rdfs:range xsd:boolean ;
.
webvowl:datatypeType
  rdf:type owl:ObjectProperty ;
  rdfs:domain webvowl:Datatype ;
  rdfs:label "Datatype Type"^^xsd:string ;
  rdfs:range webvowl:DatatypeType ;
.
webvowl:datatypeTypeRdfsDatatype
  rdf:type webvowl:DatatypeType ;
  webvowl:typeLabel "rdfs:Datatype"^^xsd:string ;
.
webvowl:definedLanguage
  rdf:type owl:ObjectProperty ;
  rdfs:domain webvowl:Header ;
  rdfs:label "Defined Language"^^xsd:string ;
  rdfs:range webvowl:Language ;
.
webvowl:dimensionName
  rdf:type owl:AnnotationProperty ;
  rdfs:comment "The Name of the Dimension that is shown in the User Interface in the filter panel." ;
  rdfs:domain webvowl:FilterDimension ;
  rdfs:label "Dimension Name" ;
  rdfs:range xsd:string ;
  rdfs:subPropertyOf rdfs:label ;
.
webvowl:dimensionValueLabel
  rdf:type owl:AnnotationProperty ;
  rdfs:domain webvowl:FilterDimensionValue ;
  rdfs:label "Dimension Value Label"^^xsd:string ;
  rdfs:subPropertyOf rdfs:label ;
.
webvowl:domain
  rdf:type owl:ObjectProperty ;
  rdfs:domain webvowl:Property ;
  rdfs:range webvowl:Class ;
.
webvowl:forceFullLabels
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "If is set to false too long labels will be replaced to �...� chars. The default value is FALSE ." ;
  rdfs:domain webvowl:OptionSet ;
  rdfs:label "forceFullLabels" ;
  rdfs:range xsd:boolean ;
.
webvowl:graphStyle
  rdf:type owl:ObjectProperty ;
  rdfs:comment "We can set style of the graph. \"Circles\" are default value for the WebVOWL. \"Boxes\" means UML structure. The default value is boxes ." ;
  rdfs:domain webvowl:OptionSet ;
  rdfs:label "graphStyle" ;
  rdfs:range webvowl:GraphStyle ;
.
webvowl:hasDimensionValue
  rdf:type owl:ObjectProperty ;
  rdfs:domain webvowl:FilterDimension ;
  rdfs:range webvowl:FilterDimensionValue ;
.
webvowl:hasFilterDimension
  rdf:type owl:ObjectProperty ;
  rdfs:domain webvowl:Header ;
  rdfs:range webvowl:FilterDimension ;
.
webvowl:hasIndividual
  rdf:type owl:ObjectProperty ;
  rdfs:domain webvowl:Class ;
  rdfs:range webvowl:Individual ;
.
webvowl:headerDescription
  rdf:type owl:ObjectProperty ;
  rdfs:domain webvowl:Header ;
  rdfs:range webvowl:Description ;
.
webvowl:headerTitle
  rdf:type owl:ObjectProperty ;
  rdfs:domain webvowl:Header ;
  rdfs:range webvowl:Title ;
.
webvowl:iri
  rdf:type owl:DatatypeProperty ;
  rdfs:domain [
      rdf:type owl:Class ;
      owl:unionOf (
          webvowl:Class
          webvowl:Datatype
          webvowl:Header
          webvowl:Property
        ) ;
    ] ;
  rdfs:label "IRI"^^xsd:string ;
  rdfs:range xsd:anyURI ;
.
webvowl:iri-based
  rdf:type webvowl:Language ;
  webvowl:languageLabel "IRI-based"^^xsd:string ;
.
webvowl:isBusinessEntity
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "If a class is also a Business Entity, i.e. of Business relevance it usually is not a Reference Class."^^xsd:string ;
  rdfs:domain [
      rdf:type owl:Class ;
      owl:unionOf (
          webvowl:Class
          owl:Class
        ) ;
    ] ;
  rdfs:label "Is Business Entity"^^xsd:string ;
  rdfs:range xsd:boolean ;
.
webvowl:isExternal
  rdf:type owl:DatatypeProperty ;
  rdfs:domain [
      rdf:type owl:Class ;
      owl:unionOf (
          webvowl:Class
          owl:Class
        ) ;
    ] ;
  rdfs:label "Is External Element"^^xsd:string ;
  rdfs:range xsd:boolean ;
.
webvowl:isReferenceClass
  rdf:type owl:DatatypeProperty ;
  rdfs:domain [
      rdf:type owl:Class ;
      owl:unionOf (
          webvowl:Class
          owl:Class
        ) ;
    ] ;
  rdfs:label "Is Reference Class"^^xsd:string ;
  rdfs:range xsd:boolean ;
.
webvowl:label
  rdf:type owl:ObjectProperty ;
  rdfs:domain [
      rdf:type owl:Class ;
      owl:unionOf (
          webvowl:Class
          webvowl:Datatype
          webvowl:Individual
          webvowl:Property
          webvowl:Rule
        ) ;
    ] ;
  rdfs:range webvowl:Label ;
.
webvowl:labelMaxTextLineLength
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "Maximum number of characters per line for lables. The default value is 45 ." ;
  rdfs:domain webvowl:OptionSet ;
  rdfs:label "labelMaxTextLineLength" ;
  rdfs:range xsd:integer ;
.
webvowl:languageLabel
  rdf:type owl:AnnotationProperty ;
  rdfs:domain webvowl:Language ;
  rdfs:label "Language Label"^^xsd:string ;
  rdfs:subPropertyOf rdfs:label ;
.
webvowl:link
  rdf:type owl:DatatypeProperty ;
  rdfs:domain webvowl:ModelVersion ;
  rdfs:label "Link"^^xsd:string ;
  rdfs:range xsd:string ;
.
webvowl:maxCardinality
  rdf:type owl:DatatypeProperty ;
  rdfs:domain webvowl:Property ;
  rdfs:label "Max Cardinality"^^xsd:string ;
  rdfs:range xsd:integer ;
.
webvowl:maxMagnification
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "This number specifies maximal zoom available in application. The default value is 4 ." ;
  rdfs:domain webvowl:OptionSet ;
  rdfs:label "maxMagnification" ;
  rdfs:range xsd:float ;
.
webvowl:minCardinality
  rdf:type owl:DatatypeProperty ;
  rdfs:domain webvowl:Property ;
  rdfs:label "Min Cardinality"^^xsd:string ;
  rdfs:range xsd:integer ;
.
webvowl:minMagnification
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "This number specifies minimal zoom available in application. The default value is 0.95 ." ;
  rdfs:domain webvowl:OptionSet ;
  rdfs:label "minMagnification" ;
  rdfs:range xsd:float ;
.
webvowl:nodeCountLimitForAutoEnabling
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "It defines the threshhold of nodes in the model that trigger automated collapsing of nodes when the number of nodes is above (or equal) the threshold."^^xsd:string ;
  rdfs:domain webvowl:OptionSet ;
  rdfs:label "nodeCountLimitForAutoEnabling"^^xsd:string ;
  rdfs:range xsd:integer ;
.
webvowl:objectPropertyFilterEnabled
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "If we want to load the application with object property filter enabled we should set it to true. Application will load a little bit faster, when the graph has many elements. The default value is FALSE ." ;
  rdfs:domain webvowl:OptionSet ;
  rdfs:label "objectPropertyFilterEnabled" ;
  rdfs:range xsd:boolean ;
.
webvowl:otherVersion
  rdf:type owl:ObjectProperty ;
  rdfs:domain webvowl:Header ;
  rdfs:range webvowl:ModelVersion ;
.
webvowl:partOfUnion
  rdf:type owl:ObjectProperty ;
  rdfs:domain webvowl:Class ;
  rdfs:range webvowl:Class ;
.
webvowl:paused
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "It lets define us if the graph should start paused or resumed. More efficient for the application is to start paused. The default value is FALSE ." ;
  rdfs:domain webvowl:OptionSet ;
  rdfs:label "paused" ;
  rdfs:range xsd:boolean ;
.
webvowl:propertyType
  rdf:type owl:ObjectProperty ;
  rdfs:domain webvowl:Property ;
  rdfs:label "Property Type"^^xsd:string ;
  rdfs:range webvowl:PropertyType ;
.
webvowl:propertyTypeDatatypeProperty
  rdf:type webvowl:PropertyType ;
  webvowl:typeLabel "owl:datatypeProperty"^^xsd:string ;
.
webvowl:propertyTypeObjectProperty
  rdf:type webvowl:PropertyType ;
  webvowl:typeLabel "owl:objectProperty"^^xsd:string ;
.
webvowl:propertyTypeSubclassOf
  rdf:type webvowl:PropertyType ;
  webvowl:typeLabel "rdfs:SubClassOf"^^xsd:string ;
.
webvowl:range
  rdf:type owl:ObjectProperty ;
  rdfs:domain webvowl:Property ;
  rdfs:range webvowl:Class ;
.
webvowl:ruleFilterEnabled
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "If we want to load the application with rule filter enabled we should set it to true. Application will load a little bit faster, when the graph has many elements. The default value is FALSE ." ;
  rdfs:domain webvowl:OptionSet ;
  rdfs:label "ruleFilterEnabled" ;
  rdfs:range xsd:boolean ;
.
webvowl:ruleInput
  rdf:type owl:ObjectProperty ;
  rdfs:domain webvowl:Rule ;
  rdfs:label "Rule Input"^^xsd:string ;
  rdfs:range webvowl:Property ;
.
webvowl:ruleOutput
  rdf:type owl:ObjectProperty ;
  rdfs:domain webvowl:Rule ;
  rdfs:label "Rule Output"^^xsd:string ;
  rdfs:range webvowl:Property ;
.
webvowl:tag
  rdf:type owl:ObjectProperty ;
  rdfs:domain [
      rdf:type owl:Class ;
      owl:unionOf (
          webvowl:Class
          webvowl:Property
          webvowl:Datatype
        ) ;
    ] ;
  rdfs:range webvowl:FilterDimensionValue ;
.
webvowl:typeLabel
  rdf:type owl:AnnotationProperty ;
  rdfs:domain webvowl:DatatypeType ;
  rdfs:domain webvowl:PropertyType ;
  rdfs:domain webvowl:Type ;
  rdfs:label "Type Label"^^xsd:string ;
  rdfs:subPropertyOf rdfs:label ;
.
webvowl:typeOwlClass
  rdf:type webvowl:Type ;
  webvowl:typeLabel "owl:class"^^xsd:string ;
.
webvowl:typeOwlUnionOf
  rdf:type webvowl:Type ;
  webvowl:typeLabel "owl:unionOf"^^xsd:string ;
.
webvowl:umlBoxMinHeight
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "Minimal height of box for the boxes view. The default value is 30 ." ;
  rdfs:domain webvowl:OptionSet ;
  rdfs:label "umlBoxMinHeight" ;
  rdfs:range xsd:integer ;
.
webvowl:umlBoxMinWidth
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "Minimal width of box for the boxes view. The default value is 100 ." ;
  rdfs:domain webvowl:OptionSet ;
  rdfs:label "umlBoxMinWidth" ;
  rdfs:range xsd:integer ;
.
webvowl:undef
  rdf:type webvowl:Language ;
  webvowl:languageLabel "undefined"^^xsd:string ;
.
webvowl:version
  rdf:type owl:DatatypeProperty ;
  rdfs:domain [
      rdf:type owl:Class ;
      owl:unionOf (
          webvowl:Header
          webvowl:ModelVersion
        ) ;
    ] ;
  rdfs:label "Version"^^xsd:string ;
  rdfs:range xsd:string ;
.
xsd:boolean
  rdf:type rdfs:Class ;
.
xsd:float
  rdf:type rdfs:Class ;
.
xsd:integer
  rdf:type rdfs:Class ;
.
owl:Class
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object webvowl:Class ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            sp:object webvowl:typeOwlClass ;
            sp:predicate webvowl:classType ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "iri"^^xsd:string ;
              ] ;
            sp:predicate webvowl:iri ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "prefLabelIri"^^xsd:string ;
              ] ;
            sp:predicate webvowl:label ;
            sp:subject spin:_this ;
          ]
          [
            sp:object webvowl:Label ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "prefLabelIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object webvowl:undef ;
            sp:predicate webvowl:contentLanguage ;
            sp:subject [
                sp:varName "prefLabelIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "prefLabel"^^xsd:string ;
              ] ;
            sp:predicate webvowl:content ;
            sp:subject [
                sp:varName "prefLabelIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "iriLabelIri"^^xsd:string ;
              ] ;
            sp:predicate webvowl:label ;
            sp:subject spin:_this ;
          ]
          [
            sp:object webvowl:Label ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "iriLabelIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object webvowl:iri-based ;
            sp:predicate webvowl:contentLanguage ;
            sp:subject [
                sp:varName "iriLabelIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "localname"^^xsd:string ;
              ] ;
            sp:predicate webvowl:content ;
            sp:subject [
                sp:varName "iriLabelIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "definitionIri"^^xsd:string ;
              ] ;
            sp:predicate webvowl:annotation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object webvowl:Definition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "definitionIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object webvowl:undef ;
            sp:predicate webvowl:contentLanguage ;
            sp:subject [
                sp:varName "definitionIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "definition"^^xsd:string ;
              ] ;
            sp:predicate webvowl:content ;
            sp:subject [
                sp:varName "definitionIri"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object owl:Class ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "prefLabel"^^xsd:string ;
                    ] ;
                  sp:predicate <http://www.w3.org/2004/02/skos/core#prefLabel> ;
                  sp:subject spin:_this ;
                ]
                [
                  rdf:type sp:Bind ;
                  sp:expression [
                      rdf:type sp:iri ;
                      sp:arg1 [
                          rdf:type sp:concat ;
                          sp:arg1 [
                              rdf:type xsd:string ;
                              sp:arg1 spin:_this ;
                            ] ;
                          sp:arg2 "PrefLabel" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "prefLabelIri"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "definition"^^xsd:string ;
                    ] ;
                  sp:predicate <http://www.w3.org/2004/02/skos/core#definition> ;
                  sp:subject spin:_this ;
                ]
                [
                  rdf:type sp:Bind ;
                  sp:expression [
                      rdf:type sp:iri ;
                      sp:arg1 [
                          rdf:type sp:concat ;
                          sp:arg1 [
                              rdf:type xsd:string ;
                              sp:arg1 spin:_this ;
                            ] ;
                          sp:arg2 "Definition" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "definitionIri"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 spin:_this ;
                      ] ;
                    sp:arg2 "IriLabel" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "iriLabelIri"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type afn:localname ;
                sp:arg1 spin:_this ;
              ] ;
            sp:variable [
                sp:varName "localname"^^xsd:string ;
              ] ;
          ]
          [
            sp:object webvowl:FocalOntology ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "fo"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:contains ;
                sp:arg1 [
                    rdf:type xsd:string ;
                    sp:arg1 spin:_this ;
                  ] ;
                sp:arg2 [
                    rdf:type xsd:string ;
                    sp:arg1 [
                        sp:varName "fo"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression spin:_this ;
            sp:variable [
                sp:varName "iri"^^xsd:string ;
              ] ;
          ]
        ) ;
      rdfs:comment "Create owl:Class in WebVOWL"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object webvowl:Individual ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "indiv"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "indiv"^^xsd:string ;
              ] ;
            sp:predicate webvowl:hasIndividual ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "iri"^^xsd:string ;
              ] ;
            sp:predicate webvowl:iri ;
            sp:subject [
                sp:varName "indiv"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "prefLabelIri"^^xsd:string ;
              ] ;
            sp:predicate webvowl:label ;
            sp:subject [
                sp:varName "indiv"^^xsd:string ;
              ] ;
          ]
          [
            sp:object webvowl:Label ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "prefLabelIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object webvowl:undef ;
            sp:predicate webvowl:contentLanguage ;
            sp:subject [
                sp:varName "prefLabelIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "prefLabel"^^xsd:string ;
              ] ;
            sp:predicate webvowl:content ;
            sp:subject [
                sp:varName "prefLabelIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "iriLabelIri"^^xsd:string ;
              ] ;
            sp:predicate webvowl:label ;
            sp:subject [
                sp:varName "indiv"^^xsd:string ;
              ] ;
          ]
          [
            sp:object webvowl:Label ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "iriLabelIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object webvowl:iri-based ;
            sp:predicate webvowl:contentLanguage ;
            sp:subject [
                sp:varName "iriLabelIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "localname"^^xsd:string ;
              ] ;
            sp:predicate webvowl:content ;
            sp:subject [
                sp:varName "iriLabelIri"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object owl:Class ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            sp:object webvowl:FocalOntology ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "fo"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:contains ;
                sp:arg1 [
                    rdf:type xsd:string ;
                    sp:arg1 spin:_this ;
                  ] ;
                sp:arg2 [
                    rdf:type xsd:string ;
                    sp:arg1 [
                        sp:varName "fo"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "indiv"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "prefLabel"^^xsd:string ;
                    ] ;
                  sp:predicate <http://www.w3.org/2004/02/skos/core#prefLabel> ;
                  sp:subject [
                      sp:varName "indiv"^^xsd:string ;
                    ] ;
                ]
                [
                  rdf:type sp:Bind ;
                  sp:expression [
                      rdf:type sp:iri ;
                      sp:arg1 [
                          rdf:type sp:concat ;
                          sp:arg1 [
                              rdf:type xsd:string ;
                              sp:arg1 [
                                  sp:varName "indiv"^^xsd:string ;
                                ] ;
                            ] ;
                          sp:arg2 "PrefLabel" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "prefLabelIri"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 [
                            sp:varName "indiv"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg2 "IriLabel" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "iriLabelIri"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type afn:localname ;
                sp:arg1 [
                    sp:varName "indiv"^^xsd:string ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "localname"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                sp:varName "indiv"^^xsd:string ;
              ] ;
            sp:variable [
                sp:varName "iri"^^xsd:string ;
              ] ;
          ]
        ) ;
      rdfs:comment "Create Individuals for owl:Class (s)"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object webvowl:Property ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "propIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object webvowl:propertyTypeSubclassOf ;
            sp:predicate webvowl:propertyType ;
            sp:subject [
                sp:varName "propIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object spin:_this ;
            sp:predicate webvowl:domain ;
            sp:subject [
                sp:varName "propIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "superclass"^^xsd:string ;
              ] ;
            sp:predicate webvowl:range ;
            sp:subject [
                sp:varName "propIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object webvowl:genericSubClassIRILabel ;
            sp:predicate webvowl:label ;
            sp:subject [
                sp:varName "propIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object webvowl:Label ;
            sp:predicate rdf:type ;
            sp:subject webvowl:genericSubClassIRILabel ;
          ]
          [
            sp:object webvowl:iri-based ;
            sp:predicate webvowl:contentLanguage ;
            sp:subject webvowl:genericSubClassIRILabel ;
          ]
          [
            sp:object "Subclass Of"^^xsd:string ;
            sp:predicate webvowl:content ;
            sp:subject webvowl:genericSubClassIRILabel ;
          ]
        ) ;
      sp:where (
          [
            sp:object owl:Class ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type afn:localname ;
                sp:arg1 spin:_this ;
              ] ;
            sp:variable [
                sp:varName "localname"^^xsd:string ;
              ] ;
          ]
          [
            sp:object webvowl:FocalOntology ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "fo"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:contains ;
                sp:arg1 [
                    rdf:type xsd:string ;
                    sp:arg1 spin:_this ;
                  ] ;
                sp:arg2 [
                    rdf:type xsd:string ;
                    sp:arg1 [
                        sp:varName "fo"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "superclass"^^xsd:string ;
              ] ;
            sp:predicate rdfs:subClassOf ;
            sp:subject spin:_this ;
          ]
          [
            rdf:type sp:NotExists ;
            sp:elements (
                [
                  sp:object owl:Restriction ;
                  sp:predicate rdf:type ;
                  sp:subject [
                      sp:varName "superclass"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:ne ;
                sp:arg1 [
                    sp:varName "superclass"^^xsd:string ;
                  ] ;
                sp:arg2 owl:Thing ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 spin:_this ;
                      ] ;
                    sp:arg2 [
                        rdf:type afn:localname ;
                        sp:arg1 [
                            sp:varName "superclass"^^xsd:string ;
                          ] ;
                      ] ;
                    sp:arg3 "SuperclassProp" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "propIri"^^xsd:string ;
              ] ;
          ]
        ) ;
      rdfs:comment "Create subClass Property for Class"^^xsd:string ;
    ] ;
.
owl:DatatypeProperty
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object webvowl:Property ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            sp:object webvowl:propertyTypeDatatypeProperty ;
            sp:predicate webvowl:propertyType ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "iri"^^xsd:string ;
              ] ;
            sp:predicate webvowl:iri ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "prefLabelIri"^^xsd:string ;
              ] ;
            sp:predicate webvowl:label ;
            sp:subject spin:_this ;
          ]
          [
            sp:object webvowl:Label ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "prefLabelIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object webvowl:undef ;
            sp:predicate webvowl:contentLanguage ;
            sp:subject [
                sp:varName "prefLabelIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "prefLabel"^^xsd:string ;
              ] ;
            sp:predicate webvowl:content ;
            sp:subject [
                sp:varName "prefLabelIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "iriLabelIri"^^xsd:string ;
              ] ;
            sp:predicate webvowl:label ;
            sp:subject spin:_this ;
          ]
          [
            sp:object webvowl:Label ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "iriLabelIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object webvowl:iri-based ;
            sp:predicate webvowl:contentLanguage ;
            sp:subject [
                sp:varName "iriLabelIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "localname"^^xsd:string ;
              ] ;
            sp:predicate webvowl:content ;
            sp:subject [
                sp:varName "iriLabelIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "definitionIri"^^xsd:string ;
              ] ;
            sp:predicate webvowl:annotation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object webvowl:Definition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "definitionIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object webvowl:undef ;
            sp:predicate webvowl:contentLanguage ;
            sp:subject [
                sp:varName "definitionIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "definition"^^xsd:string ;
              ] ;
            sp:predicate webvowl:content ;
            sp:subject [
                sp:varName "definitionIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "rangeDatatypeObjectIri"^^xsd:string ;
              ] ;
            sp:predicate webvowl:range ;
            sp:subject spin:_this ;
          ]
          [
            sp:object webvowl:datatypeTypeRdfsDatatype ;
            sp:predicate webvowl:datatypeType ;
            sp:subject [
                sp:varName "rangeDatatypeObjectIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object webvowl:Datatype ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "rangeDatatypeObjectIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "range"^^xsd:string ;
              ] ;
            sp:predicate webvowl:iri ;
            sp:subject [
                sp:varName "rangeDatatypeObjectIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "datatypeObjectLabelIri"^^xsd:string ;
              ] ;
            sp:predicate webvowl:label ;
            sp:subject [
                sp:varName "rangeDatatypeObjectIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object webvowl:iri-based ;
            sp:predicate webvowl:contentLanguage ;
            sp:subject [
                sp:varName "datatypeObjectLabelIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "rangeLabel"^^xsd:string ;
              ] ;
            sp:predicate webvowl:content ;
            sp:subject [
                sp:varName "datatypeObjectLabelIri"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object owl:DatatypeProperty ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            sp:object webvowl:FocalOntology ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "fo"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:contains ;
                sp:arg1 [
                    rdf:type xsd:string ;
                    sp:arg1 spin:_this ;
                  ] ;
                sp:arg2 [
                    rdf:type xsd:string ;
                    sp:arg1 [
                        sp:varName "fo"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "prefLabel"^^xsd:string ;
                    ] ;
                  sp:predicate <http://www.w3.org/2004/02/skos/core#prefLabel> ;
                  sp:subject spin:_this ;
                ]
                [
                  rdf:type sp:Bind ;
                  sp:expression [
                      rdf:type sp:iri ;
                      sp:arg1 [
                          rdf:type sp:concat ;
                          sp:arg1 [
                              rdf:type xsd:string ;
                              sp:arg1 spin:_this ;
                            ] ;
                          sp:arg2 "PrefLabel" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "prefLabelIri"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "definition"^^xsd:string ;
                    ] ;
                  sp:predicate <http://www.w3.org/2004/02/skos/core#definition> ;
                  sp:subject spin:_this ;
                ]
                [
                  rdf:type sp:Bind ;
                  sp:expression [
                      rdf:type sp:iri ;
                      sp:arg1 [
                          rdf:type sp:concat ;
                          sp:arg1 [
                              rdf:type xsd:string ;
                              sp:arg1 spin:_this ;
                            ] ;
                          sp:arg2 "Definition" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "definitionIri"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 spin:_this ;
                      ] ;
                    sp:arg2 "IriLabel" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "iriLabelIri"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type afn:localname ;
                sp:arg1 spin:_this ;
              ] ;
            sp:variable [
                sp:varName "localname"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression spin:_this ;
            sp:variable [
                sp:varName "iri"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "range"^^xsd:string ;
                    ] ;
                  sp:predicate rdfs:range ;
                  sp:subject spin:_this ;
                ]
                [
                  rdf:type sp:Bind ;
                  sp:expression [
                      rdf:type sp:iri ;
                      sp:arg1 [
                          rdf:type sp:concat ;
                          sp:arg1 [
                              rdf:type xsd:string ;
                              sp:arg1 spin:_this ;
                            ] ;
                          sp:arg2 "DatatypeObject" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "rangeDatatypeObjectIri"^^xsd:string ;
                    ] ;
                ]
                [
                  rdf:type sp:Bind ;
                  sp:expression [
                      rdf:type sp:iri ;
                      sp:arg1 [
                          rdf:type sp:concat ;
                          sp:arg1 [
                              rdf:type xsd:string ;
                              sp:arg1 spin:_this ;
                            ] ;
                          sp:arg2 "DatatypeObjectIriLabel" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "datatypeObjectLabelIri"^^xsd:string ;
                    ] ;
                ]
                [
                  rdf:type sp:Bind ;
                  sp:expression [
                      rdf:type afn:localname ;
                      sp:arg1 [
                          sp:varName "range"^^xsd:string ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "rangeLabel"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
        ) ;
      rdfs:comment "Create Labels and Description of Object Properties and Range Datatypes"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "anoClass"^^xsd:string ;
              ] ;
            sp:predicate webvowl:domain ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "cl"^^xsd:string ;
              ] ;
            sp:predicate webvowl:partOfUnion ;
            sp:subject [
                sp:varName "anoClass"^^xsd:string ;
              ] ;
          ]
          [
            sp:object webvowl:Class ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "anoClass"^^xsd:string ;
              ] ;
          ]
          [
            sp:object webvowl:typeOwlUnionOf ;
            sp:predicate webvowl:classType ;
            sp:subject [
                sp:varName "anoClass"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "minCard"^^xsd:string ;
              ] ;
            sp:predicate webvowl:minCardinality ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "maxCard"^^xsd:string ;
              ] ;
            sp:predicate webvowl:maxCardinality ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "card"^^xsd:string ;
              ] ;
            sp:predicate webvowl:cardinality ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            rdf:type sp:SubQuery ;
            sp:query [
                rdf:type sp:Select ;
                sp:groupBy (
                    spin:_this
                    [
                      sp:varName "dom"^^xsd:string ;
                    ]
                  ) ;
                sp:orderBy (
                    [
                      sp:varName "clName"^^xsd:string ;
                    ]
                  ) ;
                sp:resultVariables (
                    spin:_this
                    [
                      sp:varName "dom"^^xsd:string ;
                    ]
                    [
                      sp:expression [
                          rdf:type sp:iri ;
                          sp:arg1 [
                              rdf:type sp:replace ;
                              sp:arg1 [
                                  rdf:type sp:str ;
                                  sp:arg1 spin:_this ;
                                ] ;
                              sp:arg2 [
                                  rdf:type afn:localname ;
                                  sp:arg1 spin:_this ;
                                ] ;
                              sp:arg3 [
                                  rdf:type sp:concat ;
                                  sp:arg1 "UnionClass" ;
                                  sp:arg2 [
                                      rdf:type xsd:string ;
                                      sp:arg1 [
                                          rdf:type sp:GroupConcat ;
                                          sp:expression [
                                              sp:varName "clName"^^xsd:string ;
                                            ] ;
                                          sp:separator ""^^xsd:string ;
                                        ] ;
                                    ] ;
                                ] ;
                            ] ;
                        ] ;
                      sp:varName "anoClass"^^xsd:string ;
                    ]
                  ) ;
                sp:where (
                    [
                      sp:object owl:DatatypeProperty ;
                      sp:predicate rdf:type ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object webvowl:FocalOntology ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "fo"^^xsd:string ;
                        ] ;
                    ]
                    [
                      rdf:type sp:Filter ;
                      sp:expression [
                          rdf:type sp:contains ;
                          sp:arg1 [
                              rdf:type xsd:string ;
                              sp:arg1 spin:_this ;
                            ] ;
                          sp:arg2 [
                              rdf:type xsd:string ;
                              sp:arg1 [
                                  sp:varName "fo"^^xsd:string ;
                                ] ;
                            ] ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "dom"^^xsd:string ;
                        ] ;
                      sp:predicate rdfs:domain ;
                      sp:subject spin:_this ;
                    ]
                    [
                      rdf:type sp:TriplePath ;
                      sp:object [
                          sp:varName "cl"^^xsd:string ;
                        ] ;
                      sp:path [
                          rdf:type sp:SeqPath ;
                          sp:path1 [
                              rdf:type sp:SeqPath ;
                              sp:path1 owl:unionOf ;
                              sp:path2 [
                                  rdf:type sp:ModPath ;
                                  sp:modMax -2 ;
                                  sp:modMin 0 ;
                                  sp:subPath rdf:rest ;
                                ] ;
                            ] ;
                          sp:path2 rdf:first ;
                        ] ;
                      sp:subject [
                          sp:varName "dom"^^xsd:string ;
                        ] ;
                    ]
                    [
                      rdf:type sp:Bind ;
                      sp:expression [
                          rdf:type afn:localname ;
                          sp:arg1 [
                              sp:varName "cl"^^xsd:string ;
                            ] ;
                        ] ;
                      sp:variable [
                          sp:varName "clName"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:SubQuery ;
            sp:query [
                rdf:type sp:Select ;
                sp:resultVariables (
                    spin:_this
                    [
                      sp:varName "dom"^^xsd:string ;
                    ]
                    [
                      sp:varName "cl"^^xsd:string ;
                    ]
                    [
                      sp:varName "minCard"^^xsd:string ;
                    ]
                    [
                      sp:varName "maxCard"^^xsd:string ;
                    ]
                    [
                      sp:varName "card"^^xsd:string ;
                    ]
                  ) ;
                sp:where (
                    [
                      sp:object owl:DatatypeProperty ;
                      sp:predicate rdf:type ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object webvowl:FocalOntology ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "fo"^^xsd:string ;
                        ] ;
                    ]
                    [
                      rdf:type sp:Filter ;
                      sp:expression [
                          rdf:type sp:contains ;
                          sp:arg1 [
                              rdf:type xsd:string ;
                              sp:arg1 spin:_this ;
                            ] ;
                          sp:arg2 [
                              rdf:type xsd:string ;
                              sp:arg1 [
                                  sp:varName "fo"^^xsd:string ;
                                ] ;
                            ] ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "dom"^^xsd:string ;
                        ] ;
                      sp:predicate rdfs:domain ;
                      sp:subject spin:_this ;
                    ]
                    [
                      rdf:type sp:TriplePath ;
                      sp:object [
                          sp:varName "cl"^^xsd:string ;
                        ] ;
                      sp:path [
                          rdf:type sp:SeqPath ;
                          sp:path1 [
                              rdf:type sp:SeqPath ;
                              sp:path1 owl:unionOf ;
                              sp:path2 [
                                  rdf:type sp:ModPath ;
                                  sp:modMax -2 ;
                                  sp:modMin 0 ;
                                  sp:subPath rdf:rest ;
                                ] ;
                            ] ;
                          sp:path2 rdf:first ;
                        ] ;
                      sp:subject [
                          sp:varName "dom"^^xsd:string ;
                        ] ;
                    ]
                    [
                      rdf:type sp:Optional ;
                      sp:elements (
                          [
                            sp:object [
                                sp:varName "?0"^^xsd:string ;
                              ] ;
                            sp:predicate rdfs:subClassOf ;
                            sp:subject [
                                sp:varName "cl"^^xsd:string ;
                              ] ;
                          ]
                          [
                            sp:object owl:Restriction ;
                            sp:predicate rdf:type ;
                            sp:subject [
                                sp:varName "?0"^^xsd:string ;
                              ] ;
                          ]
                          [
                            sp:object spin:_this ;
                            sp:predicate owl:onProperty ;
                            sp:subject [
                                sp:varName "?0"^^xsd:string ;
                              ] ;
                          ]
                          [
                            sp:object [
                                sp:varName "minCard"^^xsd:string ;
                              ] ;
                            sp:predicate owl:minCardinality ;
                            sp:subject [
                                sp:varName "?0"^^xsd:string ;
                              ] ;
                          ]
                        ) ;
                    ]
                    [
                      rdf:type sp:Optional ;
                      sp:elements (
                          [
                            sp:object [
                                sp:varName "?1"^^xsd:string ;
                              ] ;
                            sp:predicate rdfs:subClassOf ;
                            sp:subject [
                                sp:varName "cl"^^xsd:string ;
                              ] ;
                          ]
                          [
                            sp:object owl:Restriction ;
                            sp:predicate rdf:type ;
                            sp:subject [
                                sp:varName "?1"^^xsd:string ;
                              ] ;
                          ]
                          [
                            sp:object spin:_this ;
                            sp:predicate owl:onProperty ;
                            sp:subject [
                                sp:varName "?1"^^xsd:string ;
                              ] ;
                          ]
                          [
                            sp:object [
                                sp:varName "maxCard"^^xsd:string ;
                              ] ;
                            sp:predicate owl:maxCardinality ;
                            sp:subject [
                                sp:varName "?1"^^xsd:string ;
                              ] ;
                          ]
                        ) ;
                    ]
                    [
                      rdf:type sp:Optional ;
                      sp:elements (
                          [
                            sp:object [
                                sp:varName "?2"^^xsd:string ;
                              ] ;
                            sp:predicate rdfs:subClassOf ;
                            sp:subject [
                                sp:varName "cl"^^xsd:string ;
                              ] ;
                          ]
                          [
                            sp:object owl:Restriction ;
                            sp:predicate rdf:type ;
                            sp:subject [
                                sp:varName "?2"^^xsd:string ;
                              ] ;
                          ]
                          [
                            sp:object spin:_this ;
                            sp:predicate owl:onProperty ;
                            sp:subject [
                                sp:varName "?2"^^xsd:string ;
                              ] ;
                          ]
                          [
                            sp:object [
                                sp:varName "card"^^xsd:string ;
                              ] ;
                            sp:predicate owl:cardinality ;
                            sp:subject [
                                sp:varName "?2"^^xsd:string ;
                              ] ;
                          ]
                        ) ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      rdfs:comment "If Domain is a Union, create anonymous Domain Class and connection to Classes and Cardinalities"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "domain"^^xsd:string ;
              ] ;
            sp:predicate webvowl:domain ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "minCard"^^xsd:string ;
              ] ;
            sp:predicate webvowl:minCardinality ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "maxCard"^^xsd:string ;
              ] ;
            sp:predicate webvowl:maxCardinality ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "card"^^xsd:string ;
              ] ;
            sp:predicate webvowl:cardinality ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object owl:DatatypeProperty ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            sp:object webvowl:FocalOntology ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "fo"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:contains ;
                sp:arg1 [
                    rdf:type xsd:string ;
                    sp:arg1 spin:_this ;
                  ] ;
                sp:arg2 [
                    rdf:type xsd:string ;
                    sp:arg1 [
                        sp:varName "fo"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:NotExists ;
            sp:elements (
                [
                  rdf:type sp:TriplePath ;
                  sp:object [
                      sp:varName "un"^^xsd:string ;
                    ] ;
                  sp:path [
                      rdf:type sp:SeqPath ;
                      sp:path1 rdfs:domain ;
                      sp:path2 owl:unionOf ;
                    ] ;
                  sp:subject spin:_this ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "domain"^^xsd:string ;
                    ] ;
                  sp:predicate rdfs:domain ;
                  sp:subject spin:_this ;
                ]
                [
                  rdf:type sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "?0"^^xsd:string ;
                          ] ;
                        sp:predicate rdfs:subClassOf ;
                        sp:subject [
                            sp:varName "domain"^^xsd:string ;
                          ] ;
                      ]
                      [
                        sp:object owl:Restriction ;
                        sp:predicate rdf:type ;
                        sp:subject [
                            sp:varName "?0"^^xsd:string ;
                          ] ;
                      ]
                      [
                        sp:object spin:_this ;
                        sp:predicate owl:onProperty ;
                        sp:subject [
                            sp:varName "?0"^^xsd:string ;
                          ] ;
                      ]
                      [
                        sp:object [
                            sp:varName "minCard"^^xsd:string ;
                          ] ;
                        sp:predicate owl:minCardinality ;
                        sp:subject [
                            sp:varName "?0"^^xsd:string ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  rdf:type sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "?1"^^xsd:string ;
                          ] ;
                        sp:predicate rdfs:subClassOf ;
                        sp:subject [
                            sp:varName "domain"^^xsd:string ;
                          ] ;
                      ]
                      [
                        sp:object owl:Restriction ;
                        sp:predicate rdf:type ;
                        sp:subject [
                            sp:varName "?1"^^xsd:string ;
                          ] ;
                      ]
                      [
                        sp:object spin:_this ;
                        sp:predicate owl:onProperty ;
                        sp:subject [
                            sp:varName "?1"^^xsd:string ;
                          ] ;
                      ]
                      [
                        sp:object [
                            sp:varName "maxCard"^^xsd:string ;
                          ] ;
                        sp:predicate owl:maxCardinality ;
                        sp:subject [
                            sp:varName "?1"^^xsd:string ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  rdf:type sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "?2"^^xsd:string ;
                          ] ;
                        sp:predicate rdfs:subClassOf ;
                        sp:subject [
                            sp:varName "domain"^^xsd:string ;
                          ] ;
                      ]
                      [
                        sp:object owl:Restriction ;
                        sp:predicate rdf:type ;
                        sp:subject [
                            sp:varName "?2"^^xsd:string ;
                          ] ;
                      ]
                      [
                        sp:object spin:_this ;
                        sp:predicate owl:onProperty ;
                        sp:subject [
                            sp:varName "?2"^^xsd:string ;
                          ] ;
                      ]
                      [
                        sp:object [
                            sp:varName "card"^^xsd:string ;
                          ] ;
                        sp:predicate owl:cardinality ;
                        sp:subject [
                            sp:varName "?2"^^xsd:string ;
                          ] ;
                      ]
                    ) ;
                ]
              ) ;
          ]
        ) ;
      rdfs:comment "If Domain is NOT a UNION, Create Domain connection and Cardinality"^^xsd:string ;
    ] ;
.
owl:ObjectProperty
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object webvowl:Property ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            sp:object webvowl:propertyTypeObjectProperty ;
            sp:predicate webvowl:propertyType ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "iri"^^xsd:string ;
              ] ;
            sp:predicate webvowl:iri ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "prefLabelIri"^^xsd:string ;
              ] ;
            sp:predicate webvowl:label ;
            sp:subject spin:_this ;
          ]
          [
            sp:object webvowl:Label ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "prefLabelIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object webvowl:undef ;
            sp:predicate webvowl:contentLanguage ;
            sp:subject [
                sp:varName "prefLabelIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "prefLabel"^^xsd:string ;
              ] ;
            sp:predicate webvowl:content ;
            sp:subject [
                sp:varName "prefLabelIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "iriLabelIri"^^xsd:string ;
              ] ;
            sp:predicate webvowl:label ;
            sp:subject spin:_this ;
          ]
          [
            sp:object webvowl:Label ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "iriLabelIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object webvowl:iri-based ;
            sp:predicate webvowl:contentLanguage ;
            sp:subject [
                sp:varName "iriLabelIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "localname"^^xsd:string ;
              ] ;
            sp:predicate webvowl:content ;
            sp:subject [
                sp:varName "iriLabelIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "definitionIri"^^xsd:string ;
              ] ;
            sp:predicate webvowl:annotation ;
            sp:subject spin:_this ;
          ]
          [
            sp:object webvowl:Definition ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "definitionIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object webvowl:undef ;
            sp:predicate webvowl:contentLanguage ;
            sp:subject [
                sp:varName "definitionIri"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "definition"^^xsd:string ;
              ] ;
            sp:predicate webvowl:content ;
            sp:subject [
                sp:varName "definitionIri"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            sp:object owl:ObjectProperty ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            sp:object webvowl:FocalOntology ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "fo"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:contains ;
                sp:arg1 [
                    rdf:type xsd:string ;
                    sp:arg1 spin:_this ;
                  ] ;
                sp:arg2 [
                    rdf:type xsd:string ;
                    sp:arg1 [
                        sp:varName "fo"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "prefLabel"^^xsd:string ;
                    ] ;
                  sp:predicate <http://www.w3.org/2004/02/skos/core#prefLabel> ;
                  sp:subject spin:_this ;
                ]
                [
                  rdf:type sp:Bind ;
                  sp:expression [
                      rdf:type sp:iri ;
                      sp:arg1 [
                          rdf:type sp:concat ;
                          sp:arg1 [
                              rdf:type xsd:string ;
                              sp:arg1 spin:_this ;
                            ] ;
                          sp:arg2 "PrefLabel" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "prefLabelIri"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "definition"^^xsd:string ;
                    ] ;
                  sp:predicate <http://www.w3.org/2004/02/skos/core#definition> ;
                  sp:subject spin:_this ;
                ]
                [
                  rdf:type sp:Bind ;
                  sp:expression [
                      rdf:type sp:iri ;
                      sp:arg1 [
                          rdf:type sp:concat ;
                          sp:arg1 [
                              rdf:type xsd:string ;
                              sp:arg1 spin:_this ;
                            ] ;
                          sp:arg2 "Definition" ;
                        ] ;
                    ] ;
                  sp:variable [
                      sp:varName "definitionIri"^^xsd:string ;
                    ] ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type xsd:string ;
                        sp:arg1 spin:_this ;
                      ] ;
                    sp:arg2 "IriLabel" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "iriLabelIri"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type afn:localname ;
                sp:arg1 spin:_this ;
              ] ;
            sp:variable [
                sp:varName "localname"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression spin:_this ;
            sp:variable [
                sp:varName "iri"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "range"^^xsd:string ;
                    ] ;
                  sp:predicate rdfs:range ;
                  sp:subject spin:_this ;
                ]
              ) ;
          ]
        ) ;
      rdfs:comment "Create Labels and Description of Object Properties"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "anoClass"^^xsd:string ;
              ] ;
            sp:predicate webvowl:domain ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "cl"^^xsd:string ;
              ] ;
            sp:predicate webvowl:partOfUnion ;
            sp:subject [
                sp:varName "anoClass"^^xsd:string ;
              ] ;
          ]
          [
            sp:object webvowl:Class ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "anoClass"^^xsd:string ;
              ] ;
          ]
          [
            sp:object webvowl:typeOwlUnionOf ;
            sp:predicate webvowl:classType ;
            sp:subject [
                sp:varName "anoClass"^^xsd:string ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "minCard"^^xsd:string ;
              ] ;
            sp:predicate webvowl:minCardinality ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "maxCard"^^xsd:string ;
              ] ;
            sp:predicate webvowl:maxCardinality ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "card"^^xsd:string ;
              ] ;
            sp:predicate webvowl:cardinality ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            rdf:type sp:SubQuery ;
            sp:query [
                rdf:type sp:Select ;
                sp:groupBy (
                    spin:_this
                    [
                      sp:varName "dom"^^xsd:string ;
                    ]
                  ) ;
                sp:orderBy (
                    [
                      sp:varName "clName"^^xsd:string ;
                    ]
                  ) ;
                sp:resultVariables (
                    spin:_this
                    [
                      sp:varName "dom"^^xsd:string ;
                    ]
                    [
                      sp:expression [
                          rdf:type sp:iri ;
                          sp:arg1 [
                              rdf:type sp:replace ;
                              sp:arg1 [
                                  rdf:type sp:str ;
                                  sp:arg1 spin:_this ;
                                ] ;
                              sp:arg2 [
                                  rdf:type afn:localname ;
                                  sp:arg1 spin:_this ;
                                ] ;
                              sp:arg3 [
                                  rdf:type sp:concat ;
                                  sp:arg1 "UnionClass" ;
                                  sp:arg2 [
                                      rdf:type xsd:string ;
                                      sp:arg1 [
                                          rdf:type sp:GroupConcat ;
                                          sp:expression [
                                              sp:varName "clName"^^xsd:string ;
                                            ] ;
                                          sp:separator ""^^xsd:string ;
                                        ] ;
                                    ] ;
                                ] ;
                            ] ;
                        ] ;
                      sp:varName "anoClass"^^xsd:string ;
                    ]
                  ) ;
                sp:where (
                    [
                      sp:object owl:ObjectProperty ;
                      sp:predicate rdf:type ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object webvowl:FocalOntology ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "fo"^^xsd:string ;
                        ] ;
                    ]
                    [
                      rdf:type sp:Filter ;
                      sp:expression [
                          rdf:type sp:contains ;
                          sp:arg1 [
                              rdf:type xsd:string ;
                              sp:arg1 spin:_this ;
                            ] ;
                          sp:arg2 [
                              rdf:type xsd:string ;
                              sp:arg1 [
                                  sp:varName "fo"^^xsd:string ;
                                ] ;
                            ] ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "dom"^^xsd:string ;
                        ] ;
                      sp:predicate rdfs:domain ;
                      sp:subject spin:_this ;
                    ]
                    [
                      rdf:type sp:TriplePath ;
                      sp:object [
                          sp:varName "cl"^^xsd:string ;
                        ] ;
                      sp:path [
                          rdf:type sp:SeqPath ;
                          sp:path1 [
                              rdf:type sp:SeqPath ;
                              sp:path1 owl:unionOf ;
                              sp:path2 [
                                  rdf:type sp:ModPath ;
                                  sp:modMax -2 ;
                                  sp:modMin 0 ;
                                  sp:subPath rdf:rest ;
                                ] ;
                            ] ;
                          sp:path2 rdf:first ;
                        ] ;
                      sp:subject [
                          sp:varName "dom"^^xsd:string ;
                        ] ;
                    ]
                    [
                      rdf:type sp:Bind ;
                      sp:expression [
                          rdf:type afn:localname ;
                          sp:arg1 [
                              sp:varName "cl"^^xsd:string ;
                            ] ;
                        ] ;
                      sp:variable [
                          sp:varName "clName"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:SubQuery ;
            sp:query [
                rdf:type sp:Select ;
                sp:resultVariables (
                    spin:_this
                    [
                      sp:varName "dom"^^xsd:string ;
                    ]
                    [
                      sp:varName "cl"^^xsd:string ;
                    ]
                    [
                      sp:varName "minCard"^^xsd:string ;
                    ]
                    [
                      sp:varName "maxCard"^^xsd:string ;
                    ]
                    [
                      sp:varName "card"^^xsd:string ;
                    ]
                  ) ;
                sp:where (
                    [
                      sp:object owl:ObjectProperty ;
                      sp:predicate rdf:type ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object webvowl:FocalOntology ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "fo"^^xsd:string ;
                        ] ;
                    ]
                    [
                      rdf:type sp:Filter ;
                      sp:expression [
                          rdf:type sp:contains ;
                          sp:arg1 [
                              rdf:type xsd:string ;
                              sp:arg1 spin:_this ;
                            ] ;
                          sp:arg2 [
                              rdf:type xsd:string ;
                              sp:arg1 [
                                  sp:varName "fo"^^xsd:string ;
                                ] ;
                            ] ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "dom"^^xsd:string ;
                        ] ;
                      sp:predicate rdfs:domain ;
                      sp:subject spin:_this ;
                    ]
                    [
                      rdf:type sp:TriplePath ;
                      sp:object [
                          sp:varName "cl"^^xsd:string ;
                        ] ;
                      sp:path [
                          rdf:type sp:SeqPath ;
                          sp:path1 [
                              rdf:type sp:SeqPath ;
                              sp:path1 owl:unionOf ;
                              sp:path2 [
                                  rdf:type sp:ModPath ;
                                  sp:modMax -2 ;
                                  sp:modMin 0 ;
                                  sp:subPath rdf:rest ;
                                ] ;
                            ] ;
                          sp:path2 rdf:first ;
                        ] ;
                      sp:subject [
                          sp:varName "dom"^^xsd:string ;
                        ] ;
                    ]
                    [
                      rdf:type sp:Optional ;
                      sp:elements (
                          [
                            sp:object [
                                sp:varName "?0"^^xsd:string ;
                              ] ;
                            sp:predicate rdfs:subClassOf ;
                            sp:subject [
                                sp:varName "cl"^^xsd:string ;
                              ] ;
                          ]
                          [
                            sp:object owl:Restriction ;
                            sp:predicate rdf:type ;
                            sp:subject [
                                sp:varName "?0"^^xsd:string ;
                              ] ;
                          ]
                          [
                            sp:object spin:_this ;
                            sp:predicate owl:onProperty ;
                            sp:subject [
                                sp:varName "?0"^^xsd:string ;
                              ] ;
                          ]
                          [
                            sp:object [
                                sp:varName "minCard"^^xsd:string ;
                              ] ;
                            sp:predicate owl:minCardinality ;
                            sp:subject [
                                sp:varName "?0"^^xsd:string ;
                              ] ;
                          ]
                        ) ;
                    ]
                    [
                      rdf:type sp:Optional ;
                      sp:elements (
                          [
                            sp:object [
                                sp:varName "?1"^^xsd:string ;
                              ] ;
                            sp:predicate rdfs:subClassOf ;
                            sp:subject [
                                sp:varName "cl"^^xsd:string ;
                              ] ;
                          ]
                          [
                            sp:object owl:Restriction ;
                            sp:predicate rdf:type ;
                            sp:subject [
                                sp:varName "?1"^^xsd:string ;
                              ] ;
                          ]
                          [
                            sp:object spin:_this ;
                            sp:predicate owl:onProperty ;
                            sp:subject [
                                sp:varName "?1"^^xsd:string ;
                              ] ;
                          ]
                          [
                            sp:object [
                                sp:varName "maxCard"^^xsd:string ;
                              ] ;
                            sp:predicate owl:maxCardinality ;
                            sp:subject [
                                sp:varName "?1"^^xsd:string ;
                              ] ;
                          ]
                        ) ;
                    ]
                    [
                      rdf:type sp:Optional ;
                      sp:elements (
                          [
                            sp:object [
                                sp:varName "?2"^^xsd:string ;
                              ] ;
                            sp:predicate rdfs:subClassOf ;
                            sp:subject [
                                sp:varName "cl"^^xsd:string ;
                              ] ;
                          ]
                          [
                            sp:object owl:Restriction ;
                            sp:predicate rdf:type ;
                            sp:subject [
                                sp:varName "?2"^^xsd:string ;
                              ] ;
                          ]
                          [
                            sp:object spin:_this ;
                            sp:predicate owl:onProperty ;
                            sp:subject [
                                sp:varName "?2"^^xsd:string ;
                              ] ;
                          ]
                          [
                            sp:object [
                                sp:varName "card"^^xsd:string ;
                              ] ;
                            sp:predicate owl:cardinality ;
                            sp:subject [
                                sp:varName "?2"^^xsd:string ;
                              ] ;
                          ]
                        ) ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      rdfs:comment "If Domain is a Union, create anonymous Domain Class and connection to Classes and Cardinalities"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "anoClass"^^xsd:string ;
              ] ;
            sp:predicate webvowl:range ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "cl"^^xsd:string ;
              ] ;
            sp:predicate webvowl:partOfUnion ;
            sp:subject [
                sp:varName "anoClass"^^xsd:string ;
              ] ;
          ]
          [
            sp:object webvowl:Class ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "anoClass"^^xsd:string ;
              ] ;
          ]
          [
            sp:object webvowl:typeOwlUnionOf ;
            sp:predicate webvowl:classType ;
            sp:subject [
                sp:varName "anoClass"^^xsd:string ;
              ] ;
          ]
        ) ;
      sp:where (
          [
            rdf:type sp:SubQuery ;
            sp:query [
                rdf:type sp:Select ;
                sp:groupBy (
                    spin:_this
                    [
                      sp:varName "range"^^xsd:string ;
                    ]
                  ) ;
                sp:orderBy (
                    [
                      sp:varName "clName"^^xsd:string ;
                    ]
                  ) ;
                sp:resultVariables (
                    spin:_this
                    [
                      sp:varName "range"^^xsd:string ;
                    ]
                    [
                      sp:expression [
                          rdf:type sp:iri ;
                          sp:arg1 [
                              rdf:type sp:replace ;
                              sp:arg1 [
                                  rdf:type sp:str ;
                                  sp:arg1 spin:_this ;
                                ] ;
                              sp:arg2 [
                                  rdf:type afn:localname ;
                                  sp:arg1 spin:_this ;
                                ] ;
                              sp:arg3 [
                                  rdf:type sp:concat ;
                                  sp:arg1 "UnionClass" ;
                                  sp:arg2 [
                                      rdf:type xsd:string ;
                                      sp:arg1 [
                                          rdf:type sp:GroupConcat ;
                                          sp:expression [
                                              sp:varName "clName"^^xsd:string ;
                                            ] ;
                                          sp:separator ""^^xsd:string ;
                                        ] ;
                                    ] ;
                                ] ;
                            ] ;
                        ] ;
                      sp:varName "anoClass"^^xsd:string ;
                    ]
                  ) ;
                sp:where (
                    [
                      sp:object owl:ObjectProperty ;
                      sp:predicate rdf:type ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object webvowl:FocalOntology ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "fo"^^xsd:string ;
                        ] ;
                    ]
                    [
                      rdf:type sp:Filter ;
                      sp:expression [
                          rdf:type sp:contains ;
                          sp:arg1 [
                              rdf:type xsd:string ;
                              sp:arg1 spin:_this ;
                            ] ;
                          sp:arg2 [
                              rdf:type xsd:string ;
                              sp:arg1 [
                                  sp:varName "fo"^^xsd:string ;
                                ] ;
                            ] ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "range"^^xsd:string ;
                        ] ;
                      sp:predicate rdfs:range ;
                      sp:subject spin:_this ;
                    ]
                    [
                      rdf:type sp:TriplePath ;
                      sp:object [
                          sp:varName "cl"^^xsd:string ;
                        ] ;
                      sp:path [
                          rdf:type sp:SeqPath ;
                          sp:path1 [
                              rdf:type sp:SeqPath ;
                              sp:path1 owl:unionOf ;
                              sp:path2 [
                                  rdf:type sp:ModPath ;
                                  sp:modMax -2 ;
                                  sp:modMin 0 ;
                                  sp:subPath rdf:rest ;
                                ] ;
                            ] ;
                          sp:path2 rdf:first ;
                        ] ;
                      sp:subject [
                          sp:varName "range"^^xsd:string ;
                        ] ;
                    ]
                    [
                      rdf:type sp:Bind ;
                      sp:expression [
                          rdf:type afn:localname ;
                          sp:arg1 [
                              sp:varName "cl"^^xsd:string ;
                            ] ;
                        ] ;
                      sp:variable [
                          sp:varName "clName"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
          [
            rdf:type sp:SubQuery ;
            sp:query [
                rdf:type sp:Select ;
                sp:resultVariables (
                    spin:_this
                    [
                      sp:varName "range"^^xsd:string ;
                    ]
                    [
                      sp:varName "cl"^^xsd:string ;
                    ]
                  ) ;
                sp:where (
                    [
                      sp:object owl:ObjectProperty ;
                      sp:predicate rdf:type ;
                      sp:subject spin:_this ;
                    ]
                    [
                      sp:object webvowl:FocalOntology ;
                      sp:predicate rdf:type ;
                      sp:subject [
                          sp:varName "fo"^^xsd:string ;
                        ] ;
                    ]
                    [
                      rdf:type sp:Filter ;
                      sp:expression [
                          rdf:type sp:contains ;
                          sp:arg1 [
                              rdf:type xsd:string ;
                              sp:arg1 spin:_this ;
                            ] ;
                          sp:arg2 [
                              rdf:type xsd:string ;
                              sp:arg1 [
                                  sp:varName "fo"^^xsd:string ;
                                ] ;
                            ] ;
                        ] ;
                    ]
                    [
                      sp:object [
                          sp:varName "range"^^xsd:string ;
                        ] ;
                      sp:predicate rdfs:range ;
                      sp:subject spin:_this ;
                    ]
                    [
                      rdf:type sp:TriplePath ;
                      sp:object [
                          sp:varName "cl"^^xsd:string ;
                        ] ;
                      sp:path [
                          rdf:type sp:SeqPath ;
                          sp:path1 [
                              rdf:type sp:SeqPath ;
                              sp:path1 owl:unionOf ;
                              sp:path2 [
                                  rdf:type sp:ModPath ;
                                  sp:modMax -2 ;
                                  sp:modMin 0 ;
                                  sp:subPath rdf:rest ;
                                ] ;
                            ] ;
                          sp:path2 rdf:first ;
                        ] ;
                      sp:subject [
                          sp:varName "range"^^xsd:string ;
                        ] ;
                    ]
                  ) ;
              ] ;
          ]
        ) ;
      rdfs:comment "If Range is a Union, create anonymous Range Class and connection to Classes and Cardinalities"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "domain"^^xsd:string ;
              ] ;
            sp:predicate webvowl:domain ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "minCard"^^xsd:string ;
              ] ;
            sp:predicate webvowl:minCardinality ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "maxCard"^^xsd:string ;
              ] ;
            sp:predicate webvowl:maxCardinality ;
            sp:subject spin:_this ;
          ]
          [
            sp:object [
                sp:varName "card"^^xsd:string ;
              ] ;
            sp:predicate webvowl:cardinality ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object owl:ObjectProperty ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            sp:object webvowl:FocalOntology ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "fo"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:contains ;
                sp:arg1 [
                    rdf:type xsd:string ;
                    sp:arg1 spin:_this ;
                  ] ;
                sp:arg2 [
                    rdf:type xsd:string ;
                    sp:arg1 [
                        sp:varName "fo"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:NotExists ;
            sp:elements (
                [
                  rdf:type sp:TriplePath ;
                  sp:object [
                      sp:varName "un"^^xsd:string ;
                    ] ;
                  sp:path [
                      rdf:type sp:SeqPath ;
                      sp:path1 rdfs:domain ;
                      sp:path2 owl:unionOf ;
                    ] ;
                  sp:subject spin:_this ;
                ]
              ) ;
          ]
          [
            rdf:type sp:Optional ;
            sp:elements (
                [
                  sp:object [
                      sp:varName "domain"^^xsd:string ;
                    ] ;
                  sp:predicate rdfs:domain ;
                  sp:subject spin:_this ;
                ]
                [
                  rdf:type sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "?0"^^xsd:string ;
                          ] ;
                        sp:predicate rdfs:subClassOf ;
                        sp:subject [
                            sp:varName "domain"^^xsd:string ;
                          ] ;
                      ]
                      [
                        sp:object owl:Restriction ;
                        sp:predicate rdf:type ;
                        sp:subject [
                            sp:varName "?0"^^xsd:string ;
                          ] ;
                      ]
                      [
                        sp:object spin:_this ;
                        sp:predicate owl:onProperty ;
                        sp:subject [
                            sp:varName "?0"^^xsd:string ;
                          ] ;
                      ]
                      [
                        sp:object [
                            sp:varName "minCard"^^xsd:string ;
                          ] ;
                        sp:predicate owl:minCardinality ;
                        sp:subject [
                            sp:varName "?0"^^xsd:string ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  rdf:type sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "?1"^^xsd:string ;
                          ] ;
                        sp:predicate rdfs:subClassOf ;
                        sp:subject [
                            sp:varName "domain"^^xsd:string ;
                          ] ;
                      ]
                      [
                        sp:object owl:Restriction ;
                        sp:predicate rdf:type ;
                        sp:subject [
                            sp:varName "?1"^^xsd:string ;
                          ] ;
                      ]
                      [
                        sp:object spin:_this ;
                        sp:predicate owl:onProperty ;
                        sp:subject [
                            sp:varName "?1"^^xsd:string ;
                          ] ;
                      ]
                      [
                        sp:object [
                            sp:varName "maxCard"^^xsd:string ;
                          ] ;
                        sp:predicate owl:maxCardinality ;
                        sp:subject [
                            sp:varName "?1"^^xsd:string ;
                          ] ;
                      ]
                    ) ;
                ]
                [
                  rdf:type sp:Optional ;
                  sp:elements (
                      [
                        sp:object [
                            sp:varName "?2"^^xsd:string ;
                          ] ;
                        sp:predicate rdfs:subClassOf ;
                        sp:subject [
                            sp:varName "domain"^^xsd:string ;
                          ] ;
                      ]
                      [
                        sp:object owl:Restriction ;
                        sp:predicate rdf:type ;
                        sp:subject [
                            sp:varName "?2"^^xsd:string ;
                          ] ;
                      ]
                      [
                        sp:object spin:_this ;
                        sp:predicate owl:onProperty ;
                        sp:subject [
                            sp:varName "?2"^^xsd:string ;
                          ] ;
                      ]
                      [
                        sp:object [
                            sp:varName "card"^^xsd:string ;
                          ] ;
                        sp:predicate owl:cardinality ;
                        sp:subject [
                            sp:varName "?2"^^xsd:string ;
                          ] ;
                      ]
                    ) ;
                ]
              ) ;
          ]
        ) ;
      rdfs:comment "If Domain is NOT a UNION, Create Domain connection and Cardinality"^^xsd:string ;
    ] ;
  spin:rule [
      rdf:type sp:Construct ;
      sp:templates (
          [
            sp:object [
                sp:varName "range"^^xsd:string ;
              ] ;
            sp:predicate webvowl:range ;
            sp:subject spin:_this ;
          ]
        ) ;
      sp:where (
          [
            sp:object owl:ObjectProperty ;
            sp:predicate rdf:type ;
            sp:subject spin:_this ;
          ]
          [
            sp:object webvowl:FocalOntology ;
            sp:predicate rdf:type ;
            sp:subject [
                sp:varName "fo"^^xsd:string ;
              ] ;
          ]
          [
            rdf:type sp:Filter ;
            sp:expression [
                rdf:type sp:contains ;
                sp:arg1 [
                    rdf:type xsd:string ;
                    sp:arg1 spin:_this ;
                  ] ;
                sp:arg2 [
                    rdf:type xsd:string ;
                    sp:arg1 [
                        sp:varName "fo"^^xsd:string ;
                      ] ;
                  ] ;
              ] ;
          ]
          [
            rdf:type sp:NotExists ;
            sp:elements (
                [
                  rdf:type sp:TriplePath ;
                  sp:object [
                      sp:varName "un"^^xsd:string ;
                    ] ;
                  sp:path [
                      rdf:type sp:SeqPath ;
                      sp:path1 rdfs:range ;
                      sp:path2 owl:unionOf ;
                    ] ;
                  sp:subject spin:_this ;
                ]
              ) ;
          ]
          [
            sp:object [
                sp:varName "range"^^xsd:string ;
              ] ;
            sp:predicate rdfs:range ;
            sp:subject spin:_this ;
          ]
        ) ;
      rdfs:comment "If Range is NOT a Union, Create Range connection"^^xsd:string ;
    ] ;
.
